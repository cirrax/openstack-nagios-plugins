/* command objects for the nagios-openstack-plugins
 * used by icinga2
 * 
 * Copyright (C) 2018  Cirrax GmbH  http://www.cirrax.com
 * Benedikt Trefzer <benedikt.trefzer@cirrax.com>
 *
 * This program is free software: you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation, either version 3 of the License, or
 * (at your option) any later version.
 *
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with this program.  If not, see <http://www.gnu.org/licenses/>.
 *
*/

object CheckCommand "ceilometer-statistics" {
  command = [ "/usr/lib/nagios/plugins/check_ceilometer-statistics" ]

  arguments += {
    "--filename" = {
      value = "$openstack_credentials_file$"
      description = "file to read openstack credentials from"
    }
    "--timeout" = {
      value = "$openstack_timeout$"
      description = "amount of seconds until execution stops with unknown state"
    }
    "--insecure" = {
      value = "$openstack_insecure$"
      description = "Explicitly allow client to perform insecure SSL (https) requests"
      set_if = true
    }
    "--cacert" = {
      value = "$openstack_cacert$"
      description = "Specify a CA bundle file to use in verifying a TLS(https) server certificate"
    }

    "--meter" = {
      value = "$ceilometer_statistics_meter$"
      description = "meter name"
      required = true
    }
    "--tframe" = {
      value = "$ceilometer_statistics_tframe$"
      description = "Time frame to look back in minutes"
    }
    "--warn" = {
      value = "$ceilometer_statistics_warn$"
      description = "return warning if value is outside RANGE"
    }
    "--critical" = {
      value = "$ceilometer_statistics_crit$"
      description = "return critical if value is outside Range"
    }
    "--warn_count" = {
      value = "$ceilometer_statistics_warn-count$"
      description = "return warning if the number of samples is outside RANGE"
    }
    "--critical_count" = {
      value = "$ceilometer_statistics_crit-count$"
      description = "return critical if the number of samples is outside RANGE"
    }
    "--warn_age" = {
      value = "$ceilometer_statistics_warn-age$"
      description = "return warning if the age in minutes of the last value is outside RANGE"
    }
    "--critical_age" = {
      value = "$ceilometer_statistics_crit-age$"
      description = "return critical if the age in minutes of the last value is outside RANGE"
    }
    "--aggregate" = {
      value = "$ceilometer_statistics_aggregate$"
      description = "Aggregate function to use. Can be one of avg or sum"
    }
  }
}

object CheckCommand "cinder-services" {
  command = [ "/usr/lib/nagios/plugins/check_cinder-services" ]

  arguments += {
    "--filename" = {
      value = "$openstack_credentials_file$"
      description = "file to read openstack credentials from"
    }
    "--timeout" = {
      value = "$openstack_timeout$"
      description = "amount of seconds until execution stops with unknown state"
    }
    "--insecure" = {
      value = "$openstack_insecure$"
      description = "Explicitly allow client to perform insecure SSL (https) requests"
      set_if = true
    }
    "--cacert" = {
      value = "$openstack_cacert$"
      description = "Specify a CA bundle file to use in verifying a TLS(https) server certificate"
    }
    "--warn" = {
      value = "$cinder_services_warn$"
      description = "return warning if number of up agents is outside RANGE"
    }
    "--critical" = {
      value = "$cinder_services_crit$"
      description = "return critical if number of up agents is outside RANGE"
    }
    "--warn_disabled" = {
      value = "$cinder_services_warn_disabled$"
      description = "return warning if number of disabled agents is outside RANGE"
    }
    "--critical_disabled" = {
      value = "$cinder_services_crit_disabled$"
      description = "return critical if number of disabled agents is outside RANGE"
    }
    "--warn_down" = {
      value = "$cinder_services_warn_down$"
      description = "return warning if number of down agents is outside RANGE"
    }
    "--critical_down" = {
      value = "$cinder_services_crit_down$"
      description = "return critical if number of down agents is outside RANGE"
    }
    "--binary" = {
      value = "$cinder_services_binary$"
      description = "filter agent binary"
    }
    "--host" = {
      value = "$cinder_services_host$"
      description = "filter hostname"
    }
  }
}

object CheckCommand "glance-images" {
  command = [ "/usr/lib/nagios/plugins/check_glance-images" ]

  arguments += {
    "--filename" = {
      value = "$openstack_credentials_file$"
      description = "file to read openstack credentials from"
    }
    "--timeout" = {
      value = "$openstack_timeout$"
      description = "amount of seconds until execution stops with unknown state"
    }
    "--insecure" = {
      value = "$openstack_insecure$"
      description = "Explicitly allow client to perform insecure SSL (https) requests"
      set_if = true
    }
    "--cacert" = {
      value = "$openstack_cacert$"
      description = "Specify a CA bundle file to use in verifying a TLS(https) server certificate"
    }
    "--warn" = {
      value = "$glance_images_warn$"
      description = "return warning if repsonse time is outside RANGE"
    }
    "--critical" = {
      value = "$glance_images_crit$"
      description = "return critical if repsonse time is outside RANGE"
    }
  }
}

object CheckCommand "gnocchi-status" {
  command = [ "/usr/lib/nagios/plugins/check_gnocchi-status" ]

  arguments += {
    "--filename" = {
      value = "$openstack_credentials_file$"
      description = "file to read openstack credentials from"
    }
    "--timeout" = {
      value = "$openstack_timeout$"
      description = "amount of seconds until execution stops with unknown state"
    }
    "--insecure" = {
      value = "$openstack_insecure$"
      description = "Explicitly allow client to perform insecure SSL (https) requests"
      set_if = true
    }
    "--cacert" = {
      value = "$openstack_cacert$"
      description = "Specify a CA bundle file to use in verifying a TLS(https) server certificate"
    }
    "--warn" = {
      value = "$gnocchi_status_warn$"
      description = "return warning if number of measures to process is outside range"
    }
    "--critical" = {
      value = "$gnocchi_status_crit$"
      description = "return critical if number of measures to process is outside range"
    }
    "--warn_metrics" = {
      value = "$gnocchi_status_warn_metrics$"
      description = "return warning if number of metrics having measures to process outside RANGE"
    }
    "--critical_metrics" = {
      value = "$gnocchi_status_crit_metrics$"
      description = "return critical if number of metrics having measures to process is outside RANGE"
    }
  }
}

object CheckCommand "gnocchi-measures" {
  command = [ "/usr/lib/nagios/plugins/check_gnocchi-measures" ]

  arguments += {
    "--filename" = {
      value = "$openstack_credentials_file$"
      description = "file to read openstack credentials from"
    }
    "--warn" = {
      value = "$gnocchi_measures_warn$"
      description = "return warning if number of measures is out of range"
    }
    "--critical" = {
      value = "$gnocchi_mesures_crit$"
      description = "return critical if number of measures is out of range"
    }
    "--start" = {
      value = "$gnocchi_mesures_start$"
      description = "start timestamp to query"
    }
    "--stop" = {
      value = "$gnocchi_mesures_stop$"
      description = "stop timestamp to query"
    }
    "--project_id" = {
      value = "$gnocchi_mesures_project_id$"
      description = "project id to query"
    }
    "--metric" = {
      value = "$gnocchi_mesures_metric$"
      description = "metric to query"
    }
  }
}

object CheckCommand "keystone-token" {
  command = [ "/usr/lib/nagios/plugins/check_keystone-token" ]

  arguments += {
    "--filename" = {
      value = "$openstack_credentials_file$"
      description = "file to read openstack credentials from"
    }
    "--timeout" = {
      value = "$openstack_timeout$"
      description = "amount of seconds until execution stops with unknown state"
    }
    "--insecure" = {
      value = "$openstack_insecure$"
      description = "Explicitly allow client to perform insecure SSL (https) requests"
      set_if = true
    }
    "--cacert" = {
      value = "$openstack_cacert$"
      description = "Specify a CA bundle file to use in verifying a TLS(https) server certificate"
    }
    "--tversion" = {
      value = "$keystone_token_version$"
      description = "the version of the keystoneclient to use to verify the token (3 or 2)"
    }
    "--warn" = {
      value = "$keystone_token_warn$"
      description = "warning range"
    }
    "--critical" = {
      value = "$keystone_token_crit$"
      description = "citical range"
    }
  }
}

object CheckCommand "neutron-agents" {
  command = [ "/usr/lib/nagios/plugins/check_neutron-agents" ]

  arguments += {
    "--filename" = {
      value = "$openstack_credentials_file$"
      description = "file to read openstack credentials from"
    }
    "--timeout" = {
      value = "$openstack_timeout$"
      description = "amount of seconds until execution stops with unknown state"
    }
    "--insecure" = {
      value = "$openstack_insecure$"
      description = "Explicitly allow client to perform insecure SSL (https) requests"
      set_if = true
    }
    "--cacert" = {
      value = "$openstack_cacert$"
      description = "Specify a CA bundle file to use in verifying a TLS(https) server certificate"
    }
    "--warn" = {
      value = "$neutron_agents_warn$"
      description = "return warning if number of up agents is outside RANGE"
    }
    "--critical" = {
      value = "$neutron_agents_crit$"
      description = "return critical if number of up agents is outside RANGE"
    }
    "--warn_disabled" = {
      value = "$neutron_agents_warn_disabled$"
      description = "return warning if number of disabled agents is outside RANGE"
    }
    "--critical_disabled" = {
      value = "$neutron_agents_crit_disabled$"
      description = "return critical if number of disabled agents is outside RANGE"
    }
    "--warn_down" = {
      value = "$neutron_agents_warn_down$"
      description = "return warning if number of down agents is outside RANGE"
    }
    "--critical_down" = {
      value = "$neutron_agents_crit-down$"
      description = "return critical if number of down agents is outside RANGE"
    }
    "--binary" = {
      value = "$neutron_agents_binary$"
      description = "filter agent binary"
    }
    "--host" = {
      value = "$neutron_agents_host$"
      description = "filter hostname"
    }
  }
}

object CheckCommand "neutron-floatingips" {
  command = [ "/usr/lib/nagios/plugins/check_neutron-floatingips" ]

  arguments += {
    "--filename" = {
      value = "$openstack_credentials_file$"
      description = "file to read openstack credentials from"
    }
    "--timeout" = {
      value = "$openstack_timeout$"
      description = "amount of seconds until execution stops with unknown state"
    }
    "--insecure" = {
      value = "$openstack_insecure$"
      description = "Explicitly allow client to perform insecure SSL (https) requests"
      set_if = true
    }
    "--cacert" = {
      value = "$openstack_cacert$"
      description = "Specify a CA bundle file to use in verifying a TLS(https) server certificate"
    }
    "--warn" = {
      value = "$neutron_floatingips_warn$"
      description = "return warning if number of assigned floating ip's is outside range"
    }
    "--critical" = {
      value = "$neutron_floatingips_crit$"
      description = "return critical if number of assigned floating ip's is outside RANGE"
    }
  }
}

object CheckCommand "neutron-networkipavailabilities" {
  command = [ "/usr/lib/nagios/plugins/check_neutron-networkipavailabilities" ]

  arguments += {
    "--filename" = {
      value = "$openstack_credentials_file$"
      description = "file to read openstack credentials from"
    }
    "--timeout" = {
      value = "$openstack_timeout$"
      description = "amount of seconds until execution stops with unknown state"
    }
    "--insecure" = {
      value = "$openstack_insecure$"
      description = "Explicitly allow client to perform insecure SSL (https) requests"
      set_if = true
    }
    "--cacert" = {
      value = "$openstack_cacert$"
      description = "Specify a CA bundle file to use in verifying a TLS(https) server certificate"
    }
    "--warn" = {
      value = "$neutron_networkipavailabilities_warn$"
      description = "return warning if number of used ip's is outside range"
    }
    "--critical" = {
      value = "$neutron_networkipavailabilities_crit$"
      description = "return critical if number of used ip's is outside RANGE"
    }
    "--network_uuid" = {
      value = "$neutron_networkipavailabilities_network-uuid$"
      description = "network_uuid to check"
      required = true
    }
  }
}

object CheckCommand "neutron-routers" {
  command = [ "/usr/lib/nagios/plugins/check_neutron-routers" ]

  arguments += {
    "--filename" = {
      value = "$openstack_credentials_file$"
      description = "file to read openstack credentials from"
    }
    "--timeout" = {
      value = "$openstack_timeout$"
      description = "amount of seconds until execution stops with unknown state"
    }
    "--insecure" = {
      value = "$openstack_insecure$"
      description = "Explicitly allow client to perform insecure SSL (https) requests"
      set_if = true
    }
    "--cacert" = {
      value = "$openstack_cacert$"
      description = "Specify a CA bundle file to use in verifying a TLS(https) server certificate"
    }
    "--warn" = {
      value = "$neutron_routers_warn$"
      description = "return warning if number of down routers is greater"
    }
    "--critical" = {
      value = "$neutron_routers_crit$"
      description = "return critical if number of down routers is outside RANGE"
    }
    "--warn_build" = {
      value = "$neutron_agents_warn_build$"
      description = "return critical if number of building routers is outside RANGE"
    }
    "--critical_build" = {
      value = "$neutron_agents_crit_build$"
      description = "return critical if number of building routers is outside RANGE"
    }
  }
}

object CheckCommand "nova-hypervisors" {
  command = [ "/usr/lib/nagios/plugins/check_nova-hypervisors" ]

  arguments += {
    "--filename" = {
      value = "$openstack_credentials_file$"
      description = "file to read openstack credentials from"
    }
    "--timeout" = {
      value = "$openstack_timeout$"
      description = "amount of seconds until execution stops with unknown state"
    }
    "--insecure" = {
      value = "$openstack_insecure$"
      description = "Explicitly allow client to perform insecure SSL (https) requests"
      set_if = true
    }
    "--cacert" = {
      value = "$openstack_cacert$"
      description = "Specify a CA bundle file to use in verifying a TLS(https) server certificate"
    }
    "--host" = {
      value = "$nova_hypervisors_host$"
      description = "filter hostname"
    }
    "--warn" = {
      value = "$nova_hypervisors_warn$"
      description = "return warning if number of running vms is outside RANGE"
    }
    "--critical" = {
      value = "$nova_hypervisors_crit$"
      description = "return critical if number of running vms is outside RANGE"
    }
    "--warn_memory" = {
      value = "$nova_hypervisors_warn_memory$"
      description = "return warning if number of used memory is outside RANGE"
    }
    "--critical_memory" = {
      value = "$nova_hypervisors_crit_memory$"
      description = "return critical if number of used memory is outside RANGE"
    }
    "--warn_memory_percent" = {
      value = "$nova_hypervisors_warn_memory_percent$"
      description = "return warning if number of used memory is outside percent RANGE"
    }
    "--critical_memory_percent" = {
      value = "$nova_hypervisors_crit-memory_percent$"
      description = "return critical if number of used memory is outside percent RANGE"
    }
    "--warn_vcpus" = {
      value = "$nova_hypervisors_warn_vcpus$"
      description = "return warning if number of used vcpus is outside RANGE"
    }
    "--critical_vcpus" = {
      value = "$nova_hypervisors_crit_vcpus$"
      description = "return critical if number of used vcpus is outside RANGE"
    }
    "--warn_vcpus_percent" = {
      value = "$nova_hypervisors_warn_vcpus_percent$"
      description = "return warning if number of used vcpus is outside percent RANGE"
    }
    "--critical_vcpus_percent" = {
      value = "$nova_hypervisors_crit_vcpus_percent$"
      description = "return critical if number of used vcpus is outside percentRANGE"
    }
  }
}

object CheckCommand "nova-services" {
  command = [ "/usr/lib/nagios/plugins/check_nova-services" ]

  arguments += {
    "--filename" = {
      value = "$openstack_credentials_file$"
      description = "file to read openstack credentials from"
    }
    "--timeout" = {
      value = "$openstack_timeout$"
      description = "amount of seconds until execution stops with unknown state"
    }
    "--insecure" = {
      value = "$openstack_insecure$"
      description = "Explicitly allow client to perform insecure SSL (https) requests"
      set_if = true
    }
    "--cacert" = {
      value = "$openstack_cacert$"
      description = "Specify a CA bundle file to use in verifying a TLS(https) server certificate"
    }
    "--warn" = {
      value = "$nova_services_warn$"
      description = "return warning if number of up agents is outside RANGE"
    }
    "--critical" = {
      value = "$nova_services_crit$"
      description = "return critical if number of up agents is outside RANGE"
    }
    "--warn_disabled" = {
      value = "$nova_services_warn_disabled$"
      description = "return warning if number of disabled agents is outside RANGE"
    }
    "--critical_disabled" = {
      value = "$nova_services_crit_disabled$"
      description = "return critical if number of disabled agents is outside RANGE"
    }
    "--warn_down" = {
      value = "$nova_services_warn_down$"
      description = "return warning if number of down agents is outside RANGE"
    }
    "--critical_down" = {
      value = "$nova_services_crit_down$"
      description = "return critical if number of down agents is outside RANGE"
    }
    "--binary" = {
      value = "$nova_services_binary$"
      description = "filter agent binary"
    }
    "--host" = {
      value = "$nova_services_host$"
      description = "filter hostname"
    }
  }
}

object CheckCommand "panko-events" {
  command = [ "/usr/lib/nagios/plugins/check_panko-events" ]

  arguments += {
    "--filename" = {
      value = "$openstack_credentials_file$"
      description = "file to read openstack credentials from"
    }
    "--timeout" = {
      value = "$openstack_timeout$"
      description = "amount of seconds until execution stops with unknown state"
    }
    "--insecure" = {
      value = "$openstack_insecure$"
      description = "Explicitly allow client to perform insecure SSL (https) requests"
      set_if = true
    }
    "--cacert" = {
      value = "$openstack_cacert$"
      description = "Specify a CA bundle file to use in verifying a TLS(https) server certificate"
    }
    "--warn" = {
      value = "$panko_events_warn$"
      description = "return warning if response time is outside RANGE"
    }
    "--critical" = {
      value = "$panko_events_crit$"
      description = "return critical if response time is outside Range"
    }
  }
}

object CheckCommand "rally-results" {
  command = [ "/usr/lib/nagios/plugins/check_rally-results" ]

  arguments += {
    "--resultfile" = {
      value = "$rally_results_resultfile$"
      description = "file to read results from (output of rally task results)"
    }
    "--warn" = {
      value = "$rally_results_warn$"
      description = "return warning if error counter is outside RANGE"
    }
    "--critical" = {
      value = "$rally_results_crit$"
      description = "return critical if error counter is outside RANGE"
    }
    "--warn_total" = {
      value = "$rally_results_warn_total$"
      description = "return warning if number of scenarios is outside RANGE"
    }
    "--critical_total" = {
      value = "$rally_results_crit_total$"
      description = "return critical if number of scenarios is outside RANGE"
    }
    "--warn_slafail" = {
      value = "$rally_results_warn_slafail$"
      description = "return warning if number of sla failures is outside RANGE"
    }
    "--critical_slafail" = {
      value = "$rally_results_crit_slafail$"
      description = "return critical if number of sla failures is outside RANGE"
    }
    "--warn_fulldur" = {
      value = "$rally_results_warn_fulldur$"
      description = "return warning if full_duration is outside RANGE"
    }
    "--critical_fulldur" = {
      value = "$rally_results_crit_fulldur$"
      description = "return critical if full_duration is outside RANGE"
    }
    "--warn_loaddur" = {
      value = "$rally_results_warn_loaddur$"
      description = "return warning if load_duration is outside RANGE"
    }
    "--critical_loaddur" = {
      value = "$rally_results_crit_loaddur$"
      description = "return critical if load_duration is outside RANGE"
    }
  }
}
